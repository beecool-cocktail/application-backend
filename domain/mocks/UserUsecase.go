// Code generated by mockery v2.30.16. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/beecool-cocktail/application-backend/domain"
	mock "github.com/stretchr/testify/mock"
)

// UserUsecase is an autogenerated mock type for the UserUsecase type
type UserUsecase struct {
	mock.Mock
}

// DeleteUserAvatar provides a mock function with given fields: ctx, userID
func (_m *UserUsecase) DeleteUserAvatar(ctx context.Context, userID int64) error {
	ret := _m.Called(ctx, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Logout provides a mock function with given fields: ctx, id
func (_m *UserUsecase) Logout(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// QueryById provides a mock function with given fields: ctx, id
func (_m *UserUsecase) QueryById(ctx context.Context, id int64) (domain.User, error) {
	ret := _m.Called(ctx, id)

	var r0 domain.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (domain.User, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) domain.User); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUserAvatar provides a mock function with given fields: ctx, d, ui
func (_m *UserUsecase) UpdateUserAvatar(ctx context.Context, d *domain.User, ui *domain.UserAvatar) error {
	ret := _m.Called(ctx, d, ui)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.User, *domain.UserAvatar) error); ok {
		r0 = rf(ctx, d, ui)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUserCollectionStatus provides a mock function with given fields: ctx, d
func (_m *UserUsecase) UpdateUserCollectionStatus(ctx context.Context, d *domain.User) error {
	ret := _m.Called(ctx, d)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.User) error); ok {
		r0 = rf(ctx, d)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUserName provides a mock function with given fields: ctx, d
func (_m *UserUsecase) UpdateUserName(ctx context.Context, d *domain.User) error {
	ret := _m.Called(ctx, d)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.User) error); ok {
		r0 = rf(ctx, d)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUserUsecase creates a new instance of UserUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserUsecase {
	mock := &UserUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
