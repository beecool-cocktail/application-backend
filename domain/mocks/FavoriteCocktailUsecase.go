// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/beecool-cocktail/application-backend/domain"
	mock "github.com/stretchr/testify/mock"
)

// FavoriteCocktailUsecase is an autogenerated mock type for the FavoriteCocktailUsecase type
type FavoriteCocktailUsecase struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, cocktailID, userID
func (_m *FavoriteCocktailUsecase) Delete(ctx context.Context, cocktailID int64, userID int64) error {
	ret := _m.Called(ctx, cocktailID, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) error); ok {
		r0 = rf(ctx, cocktailID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// QueryByUserID provides a mock function with given fields: ctx, id, pagination
func (_m *FavoriteCocktailUsecase) QueryByUserID(ctx context.Context, id int64, pagination domain.PaginationUsecase) ([]domain.APIFavoriteCocktail, int64, error) {
	ret := _m.Called(ctx, id, pagination)

	var r0 []domain.APIFavoriteCocktail
	if rf, ok := ret.Get(0).(func(context.Context, int64, domain.PaginationUsecase) []domain.APIFavoriteCocktail); ok {
		r0 = rf(ctx, id, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.APIFavoriteCocktail)
		}
	}

	var r1 int64
	if rf, ok := ret.Get(1).(func(context.Context, int64, domain.PaginationUsecase) int64); ok {
		r1 = rf(ctx, id, pagination)
	} else {
		r1 = ret.Get(1).(int64)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, int64, domain.PaginationUsecase) error); ok {
		r2 = rf(ctx, id, pagination)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Store provides a mock function with given fields: ctx, c
func (_m *FavoriteCocktailUsecase) Store(ctx context.Context, c *domain.FavoriteCocktail) error {
	ret := _m.Called(ctx, c)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.FavoriteCocktail) error); ok {
		r0 = rf(ctx, c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
