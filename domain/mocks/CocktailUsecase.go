// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/beecool-cocktail/application-backend/domain"
	mock "github.com/stretchr/testify/mock"
)

// CocktailUsecase is an autogenerated mock type for the CocktailUsecase type
type CocktailUsecase struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, cocktailID, userID
func (_m *CocktailUsecase) Delete(ctx context.Context, cocktailID int64, userID int64) error {
	ret := _m.Called(ctx, cocktailID, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) error); ok {
		r0 = rf(ctx, cocktailID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllWithFilter provides a mock function with given fields: ctx, filter, pagination
func (_m *CocktailUsecase) GetAllWithFilter(ctx context.Context, filter map[string]interface{}, pagination domain.PaginationUsecase) ([]domain.APICocktail, int64, error) {
	ret := _m.Called(ctx, filter, pagination)

	var r0 []domain.APICocktail
	if rf, ok := ret.Get(0).(func(context.Context, map[string]interface{}, domain.PaginationUsecase) []domain.APICocktail); ok {
		r0 = rf(ctx, filter, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.APICocktail)
		}
	}

	var r1 int64
	if rf, ok := ret.Get(1).(func(context.Context, map[string]interface{}, domain.PaginationUsecase) int64); ok {
		r1 = rf(ctx, filter, pagination)
	} else {
		r1 = ret.Get(1).(int64)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, map[string]interface{}, domain.PaginationUsecase) error); ok {
		r2 = rf(ctx, filter, pagination)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// QueryByCocktailID provides a mock function with given fields: ctx, id
func (_m *CocktailUsecase) QueryByCocktailID(ctx context.Context, id int64) (domain.APICocktail, error) {
	ret := _m.Called(ctx, id)

	var r0 domain.APICocktail
	if rf, ok := ret.Get(0).(func(context.Context, int64) domain.APICocktail); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(domain.APICocktail)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryDraftByCocktailID provides a mock function with given fields: ctx, cocktailID, userID
func (_m *CocktailUsecase) QueryDraftByCocktailID(ctx context.Context, cocktailID int64, userID int64) (domain.APICocktail, error) {
	ret := _m.Called(ctx, cocktailID, userID)

	var r0 domain.APICocktail
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) domain.APICocktail); ok {
		r0 = rf(ctx, cocktailID, userID)
	} else {
		r0 = ret.Get(0).(domain.APICocktail)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, int64) error); ok {
		r1 = rf(ctx, cocktailID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: ctx, c, cig, cs, ci, userID
func (_m *CocktailUsecase) Store(ctx context.Context, c *domain.Cocktail, cig []domain.CocktailIngredient, cs []domain.CocktailStep, ci []domain.CocktailImage, userID int64) error {
	ret := _m.Called(ctx, c, cig, cs, ci, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Cocktail, []domain.CocktailIngredient, []domain.CocktailStep, []domain.CocktailImage, int64) error); ok {
		r0 = rf(ctx, c, cig, cs, ci, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, c, cig, cs, ci, userID
func (_m *CocktailUsecase) Update(ctx context.Context, c *domain.Cocktail, cig []domain.CocktailIngredient, cs []domain.CocktailStep, ci []domain.CocktailImage, userID int64) error {
	ret := _m.Called(ctx, c, cig, cs, ci, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Cocktail, []domain.CocktailIngredient, []domain.CocktailStep, []domain.CocktailImage, int64) error); ok {
		r0 = rf(ctx, c, cig, cs, ci, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
