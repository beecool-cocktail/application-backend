// Code generated by mockery v2.30.16. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/beecool-cocktail/application-backend/domain"
	mock "github.com/stretchr/testify/mock"
)

// SocialAccountRedisRepository is an autogenerated mock type for the SocialAccountRedisRepository type
type SocialAccountRedisRepository struct {
	mock.Mock
}

// DeleteState provides a mock function with given fields: ctx, key
func (_m *SocialAccountRedisRepository) DeleteState(ctx context.Context, key string) error {
	ret := _m.Called(ctx, key)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetState provides a mock function with given fields: ctx, key
func (_m *SocialAccountRedisRepository) GetState(ctx context.Context, key string) (domain.State, error) {
	ret := _m.Called(ctx, key)

	var r0 domain.State
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (domain.State, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.State); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(domain.State)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StoreState provides a mock function with given fields: ctx, key, state
func (_m *SocialAccountRedisRepository) StoreState(ctx context.Context, key string, state domain.State) error {
	ret := _m.Called(ctx, key, state)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.State) error); ok {
		r0 = rf(ctx, key, state)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewSocialAccountRedisRepository creates a new instance of SocialAccountRedisRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSocialAccountRedisRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *SocialAccountRedisRepository {
	mock := &SocialAccountRedisRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
