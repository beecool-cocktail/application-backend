// Code generated by mockery v2.30.16. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/beecool-cocktail/application-backend/domain"
	mock "github.com/stretchr/testify/mock"
)

// UserFileRepository is an autogenerated mock type for the UserFileRepository type
type UserFileRepository struct {
	mock.Mock
}

// SaveCropAvatarAsWebp provides a mock function with given fields: ctx, ui
func (_m *UserFileRepository) SaveCropAvatarAsWebp(ctx context.Context, ui *domain.CropAvatar) error {
	ret := _m.Called(ctx, ui)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.CropAvatar) error); ok {
		r0 = rf(ctx, ui)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveOriginAvatarAsWebp provides a mock function with given fields: ctx, ui
func (_m *UserFileRepository) SaveOriginAvatarAsWebp(ctx context.Context, ui *domain.OriginAvatar) (int, int, error) {
	ret := _m.Called(ctx, ui)

	var r0 int
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.OriginAvatar) (int, int, error)); ok {
		return rf(ctx, ui)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.OriginAvatar) int); ok {
		r0 = rf(ctx, ui)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.OriginAvatar) int); ok {
		r1 = rf(ctx, ui)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *domain.OriginAvatar) error); ok {
		r2 = rf(ctx, ui)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewUserFileRepository creates a new instance of UserFileRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserFileRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserFileRepository {
	mock := &UserFileRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
