// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/beecool-cocktail/application-backend/domain"
	mock "github.com/stretchr/testify/mock"
)

// CommandRedisRepository is an autogenerated mock type for the CommandRedisRepository type
type CommandRedisRepository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, id
func (_m *CommandRedisRepository) Delete(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *CommandRedisRepository) GetByID(ctx context.Context, id string) (domain.Command, error) {
	ret := _m.Called(ctx, id)

	var r0 domain.Command
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.Command); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(domain.Command)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: ctx, c
func (_m *CommandRedisRepository) Store(ctx context.Context, c *domain.Command) error {
	ret := _m.Called(ctx, c)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Command) error); ok {
		r0 = rf(ctx, c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
