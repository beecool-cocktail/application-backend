// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/beecool-cocktail/application-backend/domain"
	gorm "gorm.io/gorm"

	mock "github.com/stretchr/testify/mock"
)

// CocktailIngredientMySQLRepository is an autogenerated mock type for the CocktailIngredientMySQLRepository type
type CocktailIngredientMySQLRepository struct {
	mock.Mock
}

// DeleteByCocktailIDTx provides a mock function with given fields: ctx, tx, id
func (_m *CocktailIngredientMySQLRepository) DeleteByCocktailIDTx(ctx context.Context, tx *gorm.DB, id int64) error {
	ret := _m.Called(ctx, tx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, int64) error); ok {
		r0 = rf(ctx, tx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// QueryByCocktailId provides a mock function with given fields: ctx, id
func (_m *CocktailIngredientMySQLRepository) QueryByCocktailId(ctx context.Context, id int64) ([]domain.CocktailIngredient, error) {
	ret := _m.Called(ctx, id)

	var r0 []domain.CocktailIngredient
	if rf, ok := ret.Get(0).(func(context.Context, int64) []domain.CocktailIngredient); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.CocktailIngredient)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StoreTx provides a mock function with given fields: ctx, tx, c
func (_m *CocktailIngredientMySQLRepository) StoreTx(ctx context.Context, tx *gorm.DB, c *domain.CocktailIngredient) error {
	ret := _m.Called(ctx, tx, c)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, *domain.CocktailIngredient) error); ok {
		r0 = rf(ctx, tx, c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateTx provides a mock function with given fields: ctx, tx, c
func (_m *CocktailIngredientMySQLRepository) UpdateTx(ctx context.Context, tx *gorm.DB, c *domain.CocktailIngredient) (int64, error) {
	ret := _m.Called(ctx, tx, c)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, *gorm.DB, *domain.CocktailIngredient) int64); ok {
		r0 = rf(ctx, tx, c)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *gorm.DB, *domain.CocktailIngredient) error); ok {
		r1 = rf(ctx, tx, c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
