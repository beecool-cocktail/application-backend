// Code generated by mockery v2.30.16. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	redislock "github.com/bsm/redislock"

	time "time"
)

// CocktailRedisRepository is an autogenerated mock type for the CocktailRedisRepository type
type CocktailRedisRepository struct {
	mock.Mock
}

// GetCocktailCollectionNumberLock provides a mock function with given fields: ctx, key, ttl, retryInterval, retryTimes
func (_m *CocktailRedisRepository) GetCocktailCollectionNumberLock(ctx context.Context, key string, ttl time.Duration, retryInterval time.Duration, retryTimes int) (*redislock.Lock, error) {
	ret := _m.Called(ctx, key, ttl, retryInterval, retryTimes)

	var r0 *redislock.Lock
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Duration, time.Duration, int) (*redislock.Lock, error)); ok {
		return rf(ctx, key, ttl, retryInterval, retryTimes)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Duration, time.Duration, int) *redislock.Lock); ok {
		r0 = rf(ctx, key, ttl, retryInterval, retryTimes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redislock.Lock)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, time.Duration, time.Duration, int) error); ok {
		r1 = rf(ctx, key, ttl, retryInterval, retryTimes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReleaseCocktailCollectionNumberLock provides a mock function with given fields: ctx, lock
func (_m *CocktailRedisRepository) ReleaseCocktailCollectionNumberLock(ctx context.Context, lock *redislock.Lock) error {
	ret := _m.Called(ctx, lock)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *redislock.Lock) error); ok {
		r0 = rf(ctx, lock)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewCocktailRedisRepository creates a new instance of CocktailRedisRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCocktailRedisRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *CocktailRedisRepository {
	mock := &CocktailRedisRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
