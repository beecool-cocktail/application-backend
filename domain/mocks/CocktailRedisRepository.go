// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/beecool-cocktail/application-backend/domain"
	mock "github.com/stretchr/testify/mock"
)

// CocktailRedisRepository is an autogenerated mock type for the CocktailRedisRepository type
type CocktailRedisRepository struct {
	mock.Mock
}

// DecreaseCollectionNumbers provides a mock function with given fields: ctx, cr
func (_m *CocktailRedisRepository) DecreaseCollectionNumbers(ctx context.Context, cr *domain.CocktailCollection) error {
	ret := _m.Called(ctx, cr)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.CocktailCollection) error); ok {
		r0 = rf(ctx, cr)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteCollectionNumbers provides a mock function with given fields: ctx, cr
func (_m *CocktailRedisRepository) DeleteCollectionNumbers(ctx context.Context, cr *domain.CocktailCollection) error {
	ret := _m.Called(ctx, cr)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.CocktailCollection) error); ok {
		r0 = rf(ctx, cr)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IncreaseCollectionNumbers provides a mock function with given fields: ctx, cr
func (_m *CocktailRedisRepository) IncreaseCollectionNumbers(ctx context.Context, cr *domain.CocktailCollection) error {
	ret := _m.Called(ctx, cr)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.CocktailCollection) error); ok {
		r0 = rf(ctx, cr)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InitialCollectionNumbers provides a mock function with given fields: ctx, cr
func (_m *CocktailRedisRepository) InitialCollectionNumbers(ctx context.Context, cr *domain.CocktailCollection) error {
	ret := _m.Called(ctx, cr)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.CocktailCollection) error); ok {
		r0 = rf(ctx, cr)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
