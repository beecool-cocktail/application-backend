// Code generated by mockery v2.30.16. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/beecool-cocktail/application-backend/domain"
	mock "github.com/stretchr/testify/mock"
)

// CocktailIngredientUsecase is an autogenerated mock type for the CocktailIngredientUsecase type
type CocktailIngredientUsecase struct {
	mock.Mock
}

// Store provides a mock function with given fields: ctx, c
func (_m *CocktailIngredientUsecase) Store(ctx context.Context, c *domain.CocktailIngredient) error {
	ret := _m.Called(ctx, c)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.CocktailIngredient) error); ok {
		r0 = rf(ctx, c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewCocktailIngredientUsecase creates a new instance of CocktailIngredientUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCocktailIngredientUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *CocktailIngredientUsecase {
	mock := &CocktailIngredientUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
